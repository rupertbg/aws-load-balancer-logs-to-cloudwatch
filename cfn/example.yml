AWSTemplateFormatVersion: 2010-09-09

Parameters:

  DomainName:
    Type: String
    Default: none

  HostedZoneId:
    Type: String
    Default: none

  VpcId:
    Type: AWS::EC2::VPC::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for the load balancer, requires at least two subnets

  LoadBalancerType:
    Type: String
    AllowedValues:
      - classic
      - application
      - network

  ImageUri:
    Type: String
    Default: public.ecr.aws/l8n5z4p2/awslb2cwlogs:latest

Conditions:

  isApplicationLoadBalancer:
    !Equals
      - !Ref LoadBalancerType
      - application
  
  isNetworkLoadBalancer:
    !Equals
      - !Ref LoadBalancerType
      - network
  
  isClassicLoadBalancer:
    !Equals
      - !Ref LoadBalancerType
      - classic

  NotNetworkLoadBalancer:
    !Not
      - !Equals
          - !Ref LoadBalancerType
          - network

Resources:

  NetworkLoadBalancer:
    Condition: isNetworkLoadBalancer
    DependsOn: LogsBucketPolicy
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      Scheme: internet-facing
      Type: network
      IpAddressType: ipv4
      Subnets: !Ref Subnets
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LogsBucket
        - Key: connection_logs.s3.enabled
          Value: true
        - Key: connection_logs.s3.bucket
          Value: !Ref LogsBucket

  Certificate:
    Condition: isNetworkLoadBalancer
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  TLSListener:
    Condition: isNetworkLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups: 
              - TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 443
      Protocol: TLS
      Certificates:
        - CertificateArn: !Ref Certificate

  TargetGroup:
    Condition: isNetworkLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      VpcId: !Ref VpcId
      Port: 443
      Protocol: TLS
      TargetType: ip
      Targets: 
        - AvailabilityZone: all
          Id: 172.31.164.1
          Port: 443

  DNSRecord:
    Condition: isNetworkLoadBalancer
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Comment: !Sub ${AWS::StackName} DNS record for the NLB
      Name: !Ref DomainName
      Type: A

  SecurityGroup:
    Condition: NotNetworkLoadBalancer
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref AWS::StackName
      GroupDescription: !Ref AWS::StackName
      VpcId: !Ref VpcId

  SecurityGroupHTTPInbound:
    Condition: NotNetworkLoadBalancer
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  ClassicLoadBalancer:
    Condition: isClassicLoadBalancer
    DependsOn: LogsBucketPolicy
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Ref AWS::StackName
      Scheme: internet-facing
      AccessLoggingPolicy:
        Enabled: true
        EmitInterval: 5
        S3BucketName: !Ref LogsBucket
      Listeners:
        - InstancePort: 80
          LoadBalancerPort: 80
          Protocol: HTTP
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup

  ApplicationLoadBalancer:
    Condition: isApplicationLoadBalancer
    DependsOn: LogsBucketPolicy
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref LogsBucket
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup

  HTTPListener:
    Condition: isApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: application/json
            MessageBody: |
              {
                "statusCode": 200,
                "message": "Wow"
              }
            StatusCode: 200
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::AccountId}-${AWS::StackName}
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 7
      NotificationConfiguration:
        LambdaConfigurations: 
          - Event: s3:ObjectCreated:*
            Function: !GetAtt Lambda.Arn

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Statement:
          !If
            - isNetworkLoadBalancer
            - - Effect: Allow
                Action: s3:PutObject
                Principal:
                  Service: delivery.logs.amazonaws.com
                Resource: !Sub arn:${AWS::Partition}:s3:::${LogsBucket}/AWSLogs/${AWS::AccountId}/*
                Condition:
                  StringEquals:
                    s3:x-amz-acl: bucket-owner-full-control
              - Sid: AWSLogDeliveryAclCheck
                Effect: Allow
                Action: s3:GetBucketAcl
                Principal:
                  Service: delivery.logs.amazonaws.com
                Resource: !Sub arn:${AWS::Partition}:s3:::${LogsBucket}
            - - Effect: Allow
                Action: s3:PutObject
                Principal:
                  AWS: 783225319266
                Resource: !Sub arn:${AWS::Partition}:s3:::${LogsBucket}/AWSLogs/${AWS::AccountId}/*

  LogGroup:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 30
      LogGroupName: !Sub /aws/elb/testing/${LoadBalancerType}

  S3EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:s3:::${AWS::AccountId}-${AWS::StackName}
      SourceAccount: !Ref AWS::AccountId

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LOG_GROUP_NAME: !Ref LogGroup
          LOAD_BALANCER_TYPE: !Ref LoadBalancerType
      PackageType: Image
      Code:
        ImageUri: !Ref ImageUri

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Ref AWS::StackName
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
            - Effect: Allow
              Action: logs:DescribeLogGroups
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:DescribeLogStreams
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub ${LogGroup.Arn}*
            - Effect: Allow
              Action: s3:GetObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${AWS::AccountId}-${AWS::StackName}/*

Outputs:

  Name:
    Value:
      !If
        - isClassicLoadBalancer
        - !Ref ClassicLoadBalancer
        - !If 
            - isApplicationLoadBalancer
            - !GetAtt ApplicationLoadBalancer.LoadBalancerName
            - !GetAtt NetworkLoadBalancer.LoadBalancerName

  DNSName:
    Value:
      !If
        - isClassicLoadBalancer
        - !GetAtt ClassicLoadBalancer.DNSName
        - !If 
            - isApplicationLoadBalancer
            - !GetAtt ApplicationLoadBalancer.DNSName
            - !GetAtt NetworkLoadBalancer.DNSName

  HostedZoneId:
    Value:
      !If
        - isApplicationLoadBalancer
        - !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
        - !If
          - isNetworkLoadBalancer
          - !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID
          - none

  LogsBucket:
    Value: !Ref LogsBucket